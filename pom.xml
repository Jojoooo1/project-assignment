<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.5</version>
    <relativePath/>
  </parent>
  
  <groupId>com.project</groupId>
  <artifactId>api</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <name>api</name>
  <description>Project API</description>
  
  <properties>
    <java.version>21</java.version>
    
    <!-- Database -->
    <postgresql.version>42.7.4</postgresql.version>
    <flyway-database-postgresql.version>10.14.0</flyway-database-postgresql.version>
    <querydsl.version>5.1.0</querydsl.version>
    
    <!-- Logging -->
    <logstash.version>8.0</logstash.version>
    
    <!-- Observability -->
    <opentelemetry-api.version>1.41.0</opentelemetry-api.version>
    <pyroscope-agent.version>0.14.0</pyroscope-agent.version>
    
    <!-- Data & Serialization -->
    <projectlombok.version>1.18.34</projectlombok.version>
    <mapstruct.version>1.6.2</mapstruct.version>
    <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
    
    <!-- utilities -->
    <apache-commons-text.version>1.12.0</apache-commons-text.version>
    <apache-commons-collections.version>4.4</apache-commons-collections.version>
    <java-uuid-generator.version>5.1.0</java-uuid-generator.version>
    <slack-api-client.version>1.44.1</slack-api-client.version>
    
    <!-- Supply chain security -->
    <cyclonedx.version>2.9.0</cyclonedx.version>
    
    <!-- Development-->
    <git-code-format-maven-plugin.version>5.3</git-code-format-maven-plugin.version>
    
    <!-- Test -->
    <maven-surefire.version>3.5.0</maven-surefire.version>
    <testcontainers.version>1.20.2</testcontainers.version>
    <testcontainer-redis.version>1.6.4</testcontainer-redis.version>
  </properties>
  
  <dependencies>
    
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    
    <!-- HTTP client -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    
    <!-- Database & Migrations -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
    </dependency>
    
    <!-- Database ORM -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-jpa</artifactId>
      <version>${querydsl.version}</version>
      <classifier>jakarta</classifier>
    </dependency>
    
    <!-- Cache -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-cache</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    
    <!-- Telemetry -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
      <version>${opentelemetry-api.version}</version>
    </dependency>
    <!-- Profiling -->
    <dependency>
      <groupId>io.pyroscope</groupId>
      <artifactId>agent</artifactId>
      <version>${pyroscope-agent.version}</version>
    </dependency>
    
    <!-- Logs encoder -->
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash.version}</version>
    </dependency>
    
    <!-- Data & Serialization -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
      <version>${projectlombok.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct-processor</artifactId>
      <version>${mapstruct.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok-mapstruct-binding</artifactId>
      <version>${lombok-mapstruct-binding.version}</version>
    </dependency>
    
    <!-- Utilities -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${apache-commons-text.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>${apache-commons-collections.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.uuid</groupId>
      <artifactId>java-uuid-generator</artifactId>
      <version>${java-uuid-generator.version}</version>
    </dependency>
    <dependency>
      <groupId>com.slack.api</groupId>
      <artifactId>slack-api-client</artifactId>
      <version>${slack-api-client.version}</version>
    </dependency>
    
    <!-- Development tools -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    
    <!-- Testing libraries -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <!-- exclude junit 4 -->
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.redis.testcontainers</groupId>
      <artifactId>testcontainers-redis</artifactId>
      <version>${testcontainer-redis.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
  
  </dependencies>
  
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-bom</artifactId>
        <version>${opentelemetry-api.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  
  <build>
    <plugins>
      
      <!-- Unit tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire.version}</version>
      </plugin>
      
      <!-- Integration tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-surefire.version}</version>
      </plugin>
      
      <!-- Add SBOM specification for supply chain security -->
      <plugin>
        <groupId>org.cyclonedx</groupId>
        <artifactId>cyclonedx-maven-plugin</artifactId>
        <version>${cyclonedx.version}</version>
      </plugin>
      
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          
          <image>
            <env>
              <BP_JVM_VERSION>21</BP_JVM_VERSION>
            </env>
            <createdDate>${maven.build.timestamp}</createdDate>
            <bindings>
              <binding>
                ${project.basedir}/opentelemetry:/workspace/opentelemetry
              </binding>
            </bindings>
          </image>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>
      
      <!-- Query DSL-->
      <plugin>
        <groupId>com.mysema.maven</groupId>
        <artifactId>apt-maven-plugin</artifactId>
        <version>1.1.3</version>
        <executions>
          <execution>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <outputDirectory>target/generated-sources/java</outputDirectory>
              <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-apt</artifactId>
            <version>${querydsl.version}</version>
            <classifier>jakarta</classifier>
          </dependency>
        </dependencies>
      </plugin>
      
      <!-- Code formatting hooks -->
      <!-- <plugin> -->
      <!--   <groupId>com.cosium.code</groupId> -->
      <!--   <artifactId>git-code-format-maven-plugin</artifactId> -->
      <!--   <version>${git-code-format-maven-plugin.version}</version> -->
      <!--   <executions> -->
      <!--     &lt;!&ndash; On commit, format the modified files &ndash;&gt; -->
      <!--     <execution> -->
      <!--       <id>install-formatter-hook</id> -->
      <!--       <goals> -->
      <!--         <goal>install-hooks</goal> -->
      <!--       </goals> -->
      <!--     </execution> -->
      <!--     &lt;!&ndash; On Maven verify phase, fail if any file -->
      <!--     (including unmodified) is badly formatted &ndash;&gt; -->
      <!--     <execution> -->
      <!--       <id>validate-code-format</id> -->
      <!--       <goals> -->
      <!--         <goal>validate-code-format</goal> -->
      <!--       </goals> -->
      <!--     </execution> -->
      <!--   </executions> -->
      <!--   <dependencies> -->
      <!--     &lt;!&ndash; Enable https://github.com/google/google-java-format &ndash;&gt; -->
      <!--     <dependency> -->
      <!--       <groupId>com.cosium.code</groupId> -->
      <!--       <artifactId>google-java-format</artifactId> -->
      <!--       <version>${git-code-format-maven-plugin.version}</version> -->
      <!--     </dependency> -->
      <!--   </dependencies> -->
      <!-- </plugin> -->
    
    </plugins>
  </build>

</project>
